from aiogram.fsm.context import FSMContext
from aiogram.filters.state import State, StatesGroup, StateFilter
from aiogram.fsm.state import default_state
from aiogram.types import Message, CallbackQuery, InputMediaPhoto,  InputMediaAnimation
from aiogram import Router
from aiogram.filters import Command, Text
from lexicon.lexicon_ru import LEXICON_RU, LEXICON_CARD, LEXICON_CARD_RARE
from create_bot import bot
from data_base.postreSQL_bd import postreSQL_admin, postreSQL_card_add, postreSQL_cards, postreSQL_login, \
    postreSQL_pg_up, postreSQL_del_cards, postreSQL_attempts_up, postreSQL_users, postreSQL_del_universe, \
    postreSQL_cards_admin
from data_base.postgreSQL_bd_universal import postreSQL_universe_add, postgreSQL_all_universe
from keyboards.admin_kb import create_inline_kb, admin_create_pagination_keyboard, create_inline_kb_universe


router: Router = Router()

class FSMAdmin_card(StatesGroup):
    name = State()
    attack = State()
    protection = State()
    rare = State()
    universe = State()
    img = State()

class FSMAdmin_universal(StatesGroup):
    name = State()

class FSMAdmin_dust(StatesGroup):
    login = State()
    attempts = State()

@router.message(Text(text='–û—Ç–º–µ–Ω–∞'), StateFilter(default_state))
async def process_cancel_command(message: Message):
    await message.answer(text='–í—ã –∏ –Ω–µ –Ω–∞—á–∏–Ω–∞–ª–∏ –¥–æ–±–∞–≤–ª—è—Ç—å')
    await bot.edit_message_text(text='–ú–ï–ù–Æ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê', chat_id=message.from_user.id,
                                message_id=message.message_id,
                                reply_markup=create_inline_kb(1, '',
                                                              LEXICON_CARD['card'],
                                                              LEXICON_CARD['add_card'],
                                                              LEXICON_CARD['universe'],
                                                              LEXICON_CARD['add_inuverse'],
                                                              LEXICON_CARD['add_attempt']))


@router.message(Text(text='–û—Ç–º–µ–Ω–∞'), ~StateFilter(default_state))
async def process_cancel_command_state(message: Message, state: FSMContext):
    await message.answer(text='–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ')
    await bot.edit_message_text(text='–ú–ï–ù–Æ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê', chat_id=message.from_user.id,
                                message_id=message.message_id,
                                reply_markup=create_inline_kb(1, '',
                                                              LEXICON_CARD['card'],
                                                              LEXICON_CARD['add_card'],
                                                              LEXICON_CARD['universe'],
                                                              LEXICON_CARD['add_inuverse'],
                                                              LEXICON_CARD['add_attempt']))
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏ –æ—á–∏—â–∞–µ–º –¥–∞–Ω–Ω—ã–µ, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –≤–Ω—É—Ç—Ä–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π
    await state.clear()



@router.message(Command(commands=['admin']))
async def process_moderator_command(message: Message):
    if postreSQL_admin(message.from_user.id):
        await bot.delete_message(chat_id=message.from_user.id, message_id=message.message_id)
        await bot.send_message(message.from_user.id, text='–ú–ï–ù–Æ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê', reply_markup=create_inline_kb(1,'',
                                                                                                               LEXICON_CARD['card'],
                                                                                                               LEXICON_CARD['add_card'],
                                                                                                               LEXICON_CARD['universe'],
                                                                                                               LEXICON_CARD['add_inuverse'],
                                                                                                               LEXICON_CARD['add_attempt']))
    else:
        await bot.send_message(message.from_user.id, text='–í—ã –Ω–µ —è–≤–ª—è–µ—Ç–µ—Å—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º')
#region –î–∞–±–∞–≤–ª–µ–Ω–∏–µ –∫–∞—Ä—Ç–æ—á–∫–∏
@router.callback_query(Text(text=LEXICON_CARD['add_card']))
async def process_add_card_command(callback: CallbackQuery, state: FSMContext):
    await bot.delete_message(chat_id=callback.from_user.id, message_id=callback.message.message_id)
    await callback.message.answer(text="–í–≤–µ–¥–∏ –∏–º—è –∫–∞—Ä—Ç–æ—á–∫–∏:")
    await state.set_state(FSMAdmin_card.name)
    await callback.answer()

# –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∏–º–µ–Ω–∏ –∫–∞—Ä—Ç–æ—á–∫–∏
@router.message(StateFilter(FSMAdmin_card.name))
async def process_name_card(message: Message, state: FSMContext):
    await state.update_data(neme=message.text)
    await message.answer(text="–í–≤–µ–¥–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∞—Ç–∞–∫–∏ –∫–∞—Ä—Ç–æ—á–∫–∏:")
    await state.set_state(FSMAdmin_card.attack)

# –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∞—Ç–∞–∫–∏ –∫–∞—Ä—Ç–æ—á–∫–∏
@router.message(StateFilter(FSMAdmin_card.attack))
async def process_attack_card(message: Message, state: FSMContext):
    await state.update_data(attack=message.text)
    await message.answer(text="–í–≤–µ–¥–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –∑–¥–æ—Ä–æ–≤—å—è –∫–∞—Ä—Ç–æ—á–∫–∏:")
    await state.set_state(FSMAdmin_card.protection)

# –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –∑–∞—â–∏—Ç—ã –∫–∞—Ä—Ç–æ—á–∫–∏
@router.message(StateFilter(FSMAdmin_card.protection))
async def process_protection_card(message: Message, state: FSMContext):
    await state.update_data(protection=message.text)
    await state.update_data(protection=message.text)
    await message.answer(text="–í—ã–±–µ—Ä–∏—Ç–µ —Ä–µ–¥–∫–æ—Å—Ç—å", reply_markup=create_inline_kb(1, '',
                                                                                 LEXICON_CARD_RARE['usual'],
                                                                                 LEXICON_CARD_RARE['rare'],
                                                                                 LEXICON_CARD_RARE['epic'],
                                                                                 LEXICON_CARD_RARE['mythical'],
                                                                                 LEXICON_CARD_RARE['legendary']))
    await state.set_state(FSMAdmin_card.rare)


# –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ä–µ–¥–∫–æ—Å—Ç–∏
@router.callback_query(StateFilter(FSMAdmin_card.rare))
async def process_rare_card(callback: CallbackQuery, state: FSMContext, LEXICON_UNIVERSE=None):
    inuverse = postgreSQL_all_universe()
    all_inuverse = list()
    for i in range(len(inuverse)):
        all_inuverse.append(inuverse[i][0])
    await state.update_data(rare=callback.data)
    await bot.edit_message_text(text='ü™ê–í—ã–±–∏—Ä–∏—Ç–µ –≤—Å–µ–ª–µ–Ω–Ω—É—é', chat_id=callback.from_user.id, message_id=callback.message.message_id,
                                reply_markup=create_inline_kb(1, '', *all_inuverse))
    await state.set_state(FSMAdmin_card.universe)

@router.callback_query(StateFilter(FSMAdmin_card.universe))
async def process_rare_card(calllback: CallbackQuery, state: FSMContext):
    await state.update_data(universe=calllback.data)
    await calllback.message.answer(text="–ó–∞–≥—Ä—É–∑–∏—Ç–µ —Ñ–æ—Ç–æ –∫–∞—Ä—Ç–æ—á–∫–∏")
    await state.set_state(FSMAdmin_card.img)
    await calllback.answer()

# –§—É–Ω–∫—Ü–∏—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è —Ñ–æ—Ç–æ
@router.message(StateFilter(FSMAdmin_card.img))
async def process_rare_card(message: Message, state: FSMContext):
    if message.animation:
        file_info = await bot.get_file(message.document.file_id)
        await state.update_data(img='gif__'+file_info.file_id)
        new_card = await state.get_data()
        await state.clear()
        postreSQL_card_add(new_card)
        await message.answer(text='–ö–∞—Ä—Ç–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞', reply_markup=create_inline_kb(1,'',
                                                                                           LEXICON_CARD['card'],
                                                                                           LEXICON_CARD['add_card'],
                                                                                           LEXICON_CARD['universe'],
                                                                                           LEXICON_CARD['add_inuverse'],
                                                                                           LEXICON_CARD['add_attempt']))
    elif message.photo:
        await state.update_data(img='photo__' + message.photo[0].file_id)
        new_card = await state.get_data()
        await state.clear()
        postreSQL_card_add(new_card)
        await message.answer(text='–ö–∞—Ä—Ç–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞', reply_markup=create_inline_kb(1, '',
                                                                                           LEXICON_CARD['card'],
                                                                                           LEXICON_CARD['add_card'],
                                                                                           LEXICON_CARD['universe'],
                                                                                           LEXICON_CARD['add_inuverse'],
                                                                                           LEXICON_CARD['add_attempt']))
    else:
        await message.answer(text='–û—Ç–ø—Ä–∞–≤–∏–ª–∏ —á—Ç–æ —Ç–æ –Ω–µ —Ç–æ')

#endregion

#region –ü–æ–∫–∞–∑ –∫–∞—Ä—Ç–æ—á–µ–∫
@router.callback_query(Text(text=LEXICON_CARD['card']))
async def process_add_card_command(callback: CallbackQuery):
    await bot.edit_message_reply_markup(chat_id=callback.message.chat.id,
                                        message_id=callback.message.message_id,
                                        reply_markup=create_inline_kb(1, 'cards_',
                                                                      LEXICON_CARD_RARE['usual'],
                                                                      LEXICON_CARD_RARE['rare'],
                                                                      LEXICON_CARD_RARE['epic'],
                                                                      LEXICON_CARD_RARE['mythical'],
                                                                      LEXICON_CARD_RARE['legendary'],
                                                                      LEXICON_RU['back']))
    await callback.answer()



@router.callback_query(Text(text=['cards_–ù–ê–ó–ê–î', 'universe_–ù–ê–ó–ê–î']))
async def cards_print_menu(callback: CallbackQuery):
    await bot.edit_message_text(text='–ú–ï–ù–Æ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê', chat_id=callback.from_user.id,
                                message_id=callback.message.message_id,
                                reply_markup=create_inline_kb(1, '',
                                                              LEXICON_CARD['card'],
                                                              LEXICON_CARD['add_card'],
                                                              LEXICON_CARD['universe'],
                                                              LEXICON_CARD['add_inuverse'],
                                                              LEXICON_CARD['add_attempt']))
    await callback.answer()

@router.callback_query(Text(startswith='cards_'))
async def cards_print_menu(callback: CallbackQuery):
    cards = postreSQL_cards_admin(callback.data.split('_')[-1])
    print(cards)
    pg = int(postreSQL_pg_up(callback.from_user.id, -2))
    str_cards = cards[pg][3]
    if len(cards) > 0:
        if cards[pg][2].split('__')[0] == 'gif':
            await bot.send_animation(chat_id=callback.from_user.id, animation=cards[pg][2][5:],
                                                                    caption=f'{cards[pg][1]}\n'
                                                                             f'{LEXICON_CARD["rere"]} {str_cards[1:]}\n'
                                                                            f'{LEXICON_CARD["attack"]} {cards[pg][4]}\n'
                                                                            f'{LEXICON_CARD["health"]} {cards[pg][5]}\n\n'
                                                                            f'{LEXICON_CARD["value"]} {cards[pg][-2]} kms',
                                                                    reply_markup=admin_create_pagination_keyboard(cards[pg][3], 'backward',
                                                                                       f'{pg + 1}/{len(cards)}',
                                                                                       'forward'))
            await bot.delete_message(chat_id=callback.from_user.id, message_id=callback.message.message_id)
            await callback.answer()
        else:
            await bot.send_photo(chat_id=callback.from_user.id,
                                            photo=cards[pg][2][7:],
                                            caption=f'{cards[pg][1]}\n'
                                                    f'{LEXICON_CARD["rere"]} {str_cards[1:]}\n'
                                                    f'{LEXICON_CARD["attack"]} {cards[pg][4]}\n'
                                                    f'{LEXICON_CARD["health"]} {cards[pg][5]}\n\n'
                                                    f'{LEXICON_CARD["value"]} {cards[pg][-2]} kms',
                                            reply_markup=admin_create_pagination_keyboard(cards[pg][3], 'backward',
                                                                                       f'{pg + 1}/{len(cards)}',
                                                                                       'forward'))
            await bot.delete_message(chat_id=callback.from_user.id, message_id=callback.message.message_id)
            await callback.answer()

    await callback.answer()

@router.callback_query(Text(startswith='admin_forward_'))
async def process_forward_press(callback: CallbackQuery):
    cards = postreSQL_cards_admin(callback.data.split('_')[-1])
    pg = postreSQL_pg_up(callback.from_user.id, 0)
    len_pg = len(cards)
    if pg + 1 < len_pg:
        pg = postreSQL_pg_up(callback.from_user.id, 1)
        str_cards = cards[pg][3]
        if cards[pg][2].split('__')[0] == 'gif':
            await bot.edit_message_media(chat_id=callback.from_user.id, message_id=callback.message.message_id,
                                         media=InputMediaAnimation(media=cards[pg][2][5:],
                                                                   caption=f'{cards[pg][1]}\n'
                                                                           f'{LEXICON_CARD["rere"]} {str_cards[1:]}\n'
                                                                           f'{LEXICON_CARD["attack"]} {cards[pg][4]}\n'
                                                                           f'{LEXICON_CARD["health"]} {cards[pg][5]}\n\n'
                                                                           f'{LEXICON_CARD["value"]} {cards[pg][-2]} kms'),
                                         reply_markup=admin_create_pagination_keyboard(cards[pg][3], 'backward',
                                                                                       f'{pg + 1}/{len(cards)}',
                                                                                       'forward'))
        else:
            await bot.edit_message_media(chat_id=callback.from_user.id, message_id=callback.message.message_id,
                                         media=InputMediaPhoto(media=cards[pg][2][7:],
                                                               caption=f'{cards[pg][1]}\n'
                                                                       f'{LEXICON_CARD["rere"]} {str_cards[1:]}\n'
                                                                       f'{LEXICON_CARD["attack"]} {cards[pg][4]}\n'
                                                                       f'{LEXICON_CARD["health"]} {cards[pg][5]}\n\n'
                                                                       f'{LEXICON_CARD["value"]} {cards[pg][-2]} kms'),
                                         reply_markup=admin_create_pagination_keyboard(cards[pg][3], 'backward',
                                                                                       f'{pg + 1}/{len(cards)}',
                                                                                       'forward'))
    await callback.answer()

@router.callback_query(Text(startswith='admin_backward_'))
async def process_forward_press(callback: CallbackQuery):
    cards = postreSQL_cards_admin(callback.data.split('_')[-1])
    pg = int(postreSQL_pg_up(callback.from_user.id, 0))
    if pg > 0:
        pg = postreSQL_pg_up(callback.from_user.id, -1)
        str_cards = cards[pg][3]
        if cards[pg][2].split('__')[0] == 'gif':
            await bot.edit_message_media(chat_id=callback.from_user.id, message_id=callback.message.message_id,
                                         media=InputMediaAnimation(media=cards[pg][2].split('__')[1],
                                                                   caption=f'{cards[pg][1]}\n'
                                                                           f'{LEXICON_CARD["rere"]} {str_cards[1:]}\n'
                                                                           f'{LEXICON_CARD["attack"]} {cards[pg][4]}\n'
                                                                           f'{LEXICON_CARD["health"]} {cards[pg][5]}\n\n'
                                                                           f'{LEXICON_CARD["value"]} {cards[pg][-2]} kms'),
                                        reply_markup=admin_create_pagination_keyboard(cards[pg][3],'backward',
                                                                                   f'{pg + 1}/{len(cards)}',
                                                                                   'forward'))
        else:
            await bot.edit_message_media(chat_id=callback.from_user.id, message_id=callback.message.message_id,
                                         media=InputMediaPhoto(media=cards[pg][2].split('__')[1],
                                                               caption=f'{cards[pg][1]}\n'
                                                                       f'{LEXICON_CARD["rere"]} {str_cards[1:]}\n'
                                                                       f'{LEXICON_CARD["attack"]} {cards[pg][4]}\n'
                                                                       f'{LEXICON_CARD["health"]} {cards[pg][5]}\n\n'
                                                                       f'{LEXICON_CARD["value"]} {cards[pg][-2]} kms'),
                                        reply_markup=admin_create_pagination_keyboard(cards[pg][3], 'backward',
                                                                               f'{pg + 1}/{len(cards)}',
                                                                               'forward'))
    await callback.answer()

#–í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –∫–∞—Ä—Ç–æ—á–µ–∫
@router.callback_query(Text(text='–Ω–∞–∑–∞–¥_admin'))
async def back_category_command(callback: CallbackQuery):
    await callback.message.answer(text='–ú–ï–ù–Æ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê', reply_markup=create_inline_kb(1, 'cards_',
                                                                      LEXICON_CARD_RARE['usual'],
                                                                      LEXICON_CARD_RARE['rare'],
                                                                      LEXICON_CARD_RARE['epic'],
                                                                      LEXICON_CARD_RARE['mythical'],
                                                                      LEXICON_CARD_RARE['legendary'],
                                                                      LEXICON_RU['back']))
    await callback.answer()

@router.callback_query(Text(startswith='—É–¥–∞–ª–∏—Ç—å_admin_'))
async def del_product_command(callback: CallbackQuery):
    cards = postreSQL_cards_admin(callback.data.split('_')[-1])
    pg = int(postreSQL_pg_up(callback.from_user.id, 0))
    postreSQL_del_cards(cards[pg][1])
    cards.pop(pg)
    len_pg = len(cards)
    if len_pg == 0:
        await bot.send_message(callback.from_user.id, text='–ú–ï–ù–Æ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê', reply_markup=create_inline_kb(1, '',
                                                                                                                LEXICON_CARD['card'],
                                                                                                                LEXICON_CARD['add_card'],
                                                                                                                LEXICON_CARD['universe'],
                                                                                                                LEXICON_CARD['add_inuverse'],
                                                                                                                LEXICON_CARD['add_attempt']))
        await bot.delete_message(chat_id=callback.from_user.id, message_id=callback.message.message_id)
        await callback.answer()
    else:

        pg = postreSQL_pg_up(callback.from_user.id, -1)
        str_cards = cards[pg][3]

        if cards[pg][2].split('__')[0] == 'gif':
            await bot.edit_message_media(chat_id=callback.from_user.id, message_id=callback.message.message_id,
                                         media=InputMediaAnimation(media=cards[pg][2].split('__')[1],
                                                                   caption=f'{cards[pg][1]}\n'
                                                                           f'{LEXICON_CARD["rere"]} {str_cards[1:]}\n'
                                                                           f'{LEXICON_CARD["attack"]} {cards[pg][4]}\n'
                                                                           f'{LEXICON_CARD["health"]} {cards[pg][5]}\n\n'
                                                                           f'{LEXICON_CARD["value"]} {cards[pg][-2]} kms'),
                                         reply_markup=admin_create_pagination_keyboard(cards[pg][3], 'backward',
                                                                                       f'{pg + 1}/{len(cards)}',
                                                                                       'forward'))
        else:
            await bot.edit_message_media(chat_id=callback.from_user.id, message_id=callback.message.message_id,
                                         media=InputMediaPhoto(media=cards[pg][2].split('__')[1],
                                                               caption=f'{cards[pg][1]}\n'
                                                                       f'{LEXICON_CARD["rere"]} {str_cards[1:]}\n'
                                                                       f'{LEXICON_CARD["attack"]} {cards[pg][4]}\n'
                                                                       f'{LEXICON_CARD["health"]} {cards[pg][5]}\n\n'
                                                                       f'{LEXICON_CARD["value"]} {cards[pg][-2]} kms'),
                                         reply_markup=admin_create_pagination_keyboard(cards[pg][3], 'backward',
                                                                                       f'{pg + 1}/{len(cards)}',
                                                                                       'forward'))

    await callback.answer()
#endregion


#region –î–∞–±–∞–≤–ª–µ–Ω–∏–µ –≤—Å–µ–ª–µ–Ω–Ω—ã—Ö

#–ù–∞–ø–∏—Å–∞–Ω–∏–µ –∏–º–µ–Ω–∏
@router.callback_query(Text(text=LEXICON_CARD['add_inuverse']))
async def process_add_card_command(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(text='–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ –≤—Å–µ–ª–µ–Ω–Ω–æ–π')
    await state.set_state(FSMAdmin_universal.name)
    await callback.answer()

#–ó–∞–ø–∏—Å—å –≤ –±–∞–∑—É
@router.message(StateFilter(FSMAdmin_universal.name))
async def process_name_card(message: Message, state: FSMContext):
    await state.update_data(neme=message.text)
    postreSQL_universe_add(message.text)
    await message.answer(text="–í—Å–µ–ª–µ–Ω–Ω–∞—è —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞", reply_markup=create_inline_kb(1,'',
                                                                                           LEXICON_CARD['card'],
                                                                                           LEXICON_CARD['add_card'],
                                                                                           LEXICON_CARD['universe'],
                                                                                           LEXICON_CARD['add_inuverse'],
                                                                                           LEXICON_CARD['add_attempt']))
    await state.clear()

@router.callback_query(Text(text=LEXICON_CARD['universe']))
async def process_add_universe_command(callback: CallbackQuery):
    inuverse = postgreSQL_all_universe()
    all_inuverse = list()
    for i in range(len(inuverse)):
        all_inuverse.append(inuverse[i][0])
    all_inuverse.append('–ù–ê–ó–ê–î')
    await bot.edit_message_text(text='–í–°–ï–õ–ï–ù–ù–´–ï', chat_id=callback.from_user.id, message_id=callback.message.message_id,
                                reply_markup=create_inline_kb_universe(1, 'universe_del', all_inuverse))
    await callback.answer()


@router.callback_query(Text(text='universe_del_–ù–ê–ó–ê–î'))
async def del_product_command(callback: CallbackQuery):
    await bot.edit_message_text(text=f'–ú–ï–ù–Æ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê',
                                chat_id=callback.from_user.id, message_id=callback.message.message_id,
                                reply_markup=create_inline_kb(1, '',
                                                              LEXICON_CARD['card'],
                                                              LEXICON_CARD['add_card'],
                                                              LEXICON_CARD['universe'],
                                                              LEXICON_CARD['add_inuverse'],
                                                              LEXICON_CARD['add_attempt']))
@router.callback_query(Text(startswith='universe_del_'))
async def del_product_command(callback: CallbackQuery):
    print(callback.data)
    universe = callback.data.split("_")[-1]
    await bot.edit_message_text(text=f'–í—ã —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ–ª–µ–Ω–Ω—É—é <i>{universe} </i>?', chat_id=callback.from_user.id, message_id=callback.message.message_id,
                                reply_markup=create_inline_kb(1, f'del_universe_{universe}_', '–û–ö', '–û—Ç–º–µ–Ω–∞'))

@router.callback_query(Text(startswith='del_universe_'))
async def del_product_command(callback: CallbackQuery):
    print(callback.data)
    if callback.data.split('_')[-1] == '–û–ö':
        postreSQL_del_universe(callback.data.split('_')[2])
        await bot.edit_message_text(text=f'–í—Å–µ–ª–µ–Ω–Ω–∞—è <i>{callback.data.split("_")[2]} </i> —É–¥–∞–ª–µ–Ω–∞', chat_id=callback.from_user.id, message_id=callback.message.message_id,
                                    reply_markup=create_inline_kb(1, '',
                                                                  LEXICON_CARD['card'],
                                                                  LEXICON_CARD['add_card'],
                                                                  LEXICON_CARD['universe'],
                                                                  LEXICON_CARD['add_inuverse'],
                                                                  LEXICON_CARD['add_attempt']))
    else:
        await bot.edit_message_text(text=f'–ú–ï–ù–Æ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê',
                                    chat_id=callback.from_user.id, message_id=callback.message.message_id,
                                    reply_markup=create_inline_kb(1, '',
                                                                  LEXICON_CARD['card'],
                                                                  LEXICON_CARD['add_card'],
                                                                  LEXICON_CARD['universe'],
                                                                  LEXICON_CARD['add_inuverse'],
                                                                  LEXICON_CARD['add_attempt']))

#–í–≤–æ–¥ –ª–æ–≥–∏–Ω–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—ã–ª–∏
@router.callback_query(Text(text=LEXICON_CARD['add_attempt']))
async def process_add_login_dust_command(callback: CallbackQuery, state: FSMContext):
    await callback.message.answer(text='–í–≤–µ–¥–∏—Ç–µ –ª–æ–≥–∏–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è')
    await state.set_state(FSMAdmin_dust.login)


# –í–≤–æ–¥ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø—ã–ª–∏
@router.message(StateFilter(FSMAdmin_dust.login))
async def process_add_dust_command(message: Message, state: FSMContext):
    login = postreSQL_login(message.text)
    if login:
        await state.update_data(login=message.text)
        await message.answer('–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–ø—ã—Ç–æ–∫')
        await state.set_state(FSMAdmin_dust.attempts)
    else:
        await message.answer('–í—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –ª–æ–≥–∏–Ω')


#–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –≤ –ë–î
@router.message(StateFilter(FSMAdmin_dust.attempts), lambda x: x.text.isdigit())
async def process_add_dust_sql(message: Message, state: FSMContext):
    await state.update_data(attempts=message.text)
    add_dust=await state.get_data()
    await state.clear()
    postreSQL_attempts_up(add_dust)
    await message.answer(text='–ü–æ–ø—ã—Ç–∫–∏ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω—ã')
    await bot.send_message(message.from_user.id, text='–ú–ï–ù–Æ –ê–î–ú–ò–ù–ò–°–¢–†–ê–¢–û–†–ê', reply_markup=create_inline_kb(1, '',
                                                                                                           LEXICON_CARD['card'],
                                                                                                           LEXICON_CARD['add_card'],
                                                                                                           LEXICON_CARD['universe'],
                                                                                                           LEXICON_CARD['add_inuverse'],
                                                                                                           LEXICON_CARD['add_attempt']))

#–ù–µ–∫–æ—Ä–µ–∫—Ç–Ω—ã–π –≤–≤–æ–¥
@router.message(StateFilter(FSMAdmin_dust.attempts))
async def process_add_dust_sql(message: Message, state: FSMContext):
    await message.answer('–í—ã —É–∫–∞–∑–∞–ª–∏ –Ω–µ –≤–µ—Ä–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ–ø—ã—Ç–æ–∫')

#endregion
